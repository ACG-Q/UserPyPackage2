name: 自动打包Python项目

on:
  issues:
    types: [opened, edited]

jobs:
  validate-issue:
    runs-on: ubuntu-latest
    steps:
      - name: 查看触发的 Issue 内容
        run: |
          echo "Issue 标题: ${{ github.event.issue.title }}"
          echo "Issue 内容: ${{ github.event.issue.body }}"

      - name: 提取 Python 版本
        id: extract-python-version
        run: |
          PYTHON_VERSION=$(echo "${{ github.event.issue.body }}" | sed -n '/### Python版本/{n;p}' | tr -d '[:space:]')
          if [[ "$PYTHON_VERSION" == "_No response_" ]]; then
            PYTHON_VERSION="3.6.5"
          fi
          echo "python-version=${PYTHON_VERSION}"
          echo "python-version=${PYTHON_VERSION}" >> $GITHUB_OUTPUT

      - name: 提取目标平台
        id: extract-platform
        run: |
          TARGET_PLATFORM=$(echo "${{ github.event.issue.body }}" | sed -n '/### 目标平台/{n;p}' | tr -d '[:space:]')
          if [[ -z "$TARGET_PLATFORM" || "$TARGET_PLATFORM" == "_Noresponse_" ]]; then
            TARGET_PLATFORM="ubuntu-latest"
          fi
          echo "target-platform=${TARGET_PLATFORM}"
          echo "target-platform=${TARGET_PLATFORM}" >> $GITHUB_OUTPUT

      - name: 提取 ZIP 文件链接
        id: extract-zip-link
        run: |
          ZIP_LINK=$(echo "${{ github.event.issue.body }}" | grep -oP '(https:\/\/github\.com\/.+\/files\/.+\.zip)')
          if [[ -z "$ZIP_LINK" ]]; then
            echo "未找到 ZIP 文件链接，任务终止"
            exit 1
          fi
          echo "zip-link=${ZIP_LINK}"
          echo "zip-link=${ZIP_LINK}" >> $GITHUB_OUTPUT

      - name: 查看提取结果
        run: |
          echo "Python版本: ${{ steps.extract-python-version.outputs.python-version }}"
          echo "目标平台: ${{ steps.extract-platform.outputs.target-platform }}"
          echo "ZIP 文件链接: ${{ steps.extract-zip-link.outputs.zip-link }}"

      - name: 查看环境变量
        run: |
          echo "python-version=${{ steps.extract-issue-python.outputs.python-version }}"
          echo "target-platform=${{ steps.extract-issue-platform.outputs.target-platform }}"
          echo "files=${{ steps.extract-issue-files.outputs.files }}"

  setup-environment-and-build:
    needs: validate-issue
    strategy:
      matrix:
        target-platform: ${{ fromJson(needs.validate-issue.outputs.target-platform) }}
    runs-on: ${{ matrix.target-platform }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.validate-issue.outputs.python-version }}

      - name: 确认 Python 版本
        run: python --version

      - name: 下载 ZIP 文件
        run: |
          wget -O project.zip "${{ needs.validate-issue.outputs.files }}"

      - name: 解压 ZIP 文件
        run: |
          mkdir project
          unzip project.zip -d project

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          if [ -f project/requirements.txt ]; then
            pip install -r project/requirements.txt
          fi

      - name: 使用 PyInstaller 打包
        run: |
          pip install pyinstaller
          if [ -f project/*.spec ]; then
            pyinstaller project/*.spec
          else
            pyinstaller --onefile project/*.py
          fi

      - name: 保存打包结果
        run: |
          mkdir -p ${{ github.workspace }}/dist/${{ matrix.target-platform }}
          mv dist/* ${{ github.workspace }}/dist/${{ matrix.target-platform }}

  release-result:
    needs: setup-environment-and-build
    runs-on: ubuntu-latest
    steps:
      - name: 上传 Release 结果
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="v$(date +%Y%m%d%H%M%S)"
          gh release create "$TAG_NAME" ./dist/**/* \
            --title "打包结果: $TAG_NAME" \
            --notes "针对以下平台生成的构建： ${{ needs.validate-issue.outputs.target-platform }}"

      - name: 关闭 Issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue comment ${{ github.event.issue.number }} --body "打包完成！请在 [GitHub Releases](https://github.com/${{ github.repository }}/releases/tag/$TAG_NAME) 中查看结果。"
          gh issue edit ${{ github.event.issue.number }} --state closed
