name: 自动打包Python项目

on:
  issues:
    types: [opened, edited]

jobs:
  validate-issue:
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.extract-issue-info.outputs.python-version }}
      target-platform: ${{ steps.extract-issue-info.outputs.target-platform }}
      zip-link: ${{ steps.extract-issue-info.outputs.zip-link }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: python -m pip install --upgrade pip

      - name: 查看触发的 Issue 内容
        run: |
          echo "Issue 标题: ${{ github.event.issue.title }}"
          echo "Issue 内容: ${{ github.event.issue.body }}"

      - name: Extract issue info
        id: extract-issue-info
        run: |
          python .github/tools/extract-issues.py "${{ github.event.issue.body }}"

      - name: 提取 Issue 信息错误反馈
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `提取 Issue 信息时出错，请检查输入格式是否正确。`
            })

      - name: 查看提取结果
        run: |
          echo "Python版本: ${{ steps.extract-issue-info.outputs.python-version }}"
          echo "目标平台: ${{ steps.extract-issue-info.outputs.target-platform }}"
          echo "ZIP 文件链接: ${{ steps.extract-issue-info.outputs.zip-link }}"

  setup-environment:
    needs: validate-issue
    strategy:
      # fail-fast: false
      matrix:
        target-platform: ${{ fromJson(needs.validate-issue.outputs.target-platform) }}
    runs-on: ${{ matrix.target-platform }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.validate-issue.outputs.python-version }}
        continue-on-error: true

      - name: 设置 Python 环境错误反馈
        if: steps.set-python-environment.outcome == 'failure'  # 确保检查该步骤是否失败
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `设置 Python 环境时出错。可能是指定的 Python 版本 (${{ needs.validate-issue.outputs.python-version }}) 不可用。\n请参考 [版本清单](https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json) 并更新 Issue。`
            });
      
      - name: 确认 Python 版本
        run: python --version

      - name: 下载 ZIP 文件
        id: download-zip
        run: |
          curl -L -o project.zip ${{ needs.validate-issue.outputs.zip-link }} || exit 1

      - name: 解压 ZIP 文件
        id: unzip-zip
        run: |
          mkdir -p project
          unzip project.zip -d project || exit 1

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          if [ -f project/requirements.txt ]; then
            pip install -r project/requirements.txt
          else
            echo "requirements.txt 未找到，跳过依赖安装。"
          fi

      - name: 使用 PyInstaller 打包
        run: |
          pip install pyinstaller
          if ls project/*.spec >/dev/null 2>&1; then
            pyinstaller project/*.spec
          elif ls project/*.py >/dev/null 2>&1; then
            pyinstaller --onefile project/*.py
          else
            echo "未找到可用的 .spec 或 Python 文件。" && exit 1

      - name: 保存打包结果
        run: |
          mkdir -p ${{ github.workspace }}/build/${{ matrix.target-platform }}
          mv dist/* ${{ github.workspace }}/build/${{ matrix.target-platform }}

  release-result:
    needs: [validate-issue, setup-environment]
    runs-on: ubuntu-latest
    steps:
      - name: 上传 Release 结果
        id: upload-release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const tagName = `v${new Date().toISOString().replace(/[-T:.Z]/g, '')}`;
            const buildPath = `${process.env.GITHUB_WORKSPACE}/build/${context.matrix.target-platform}`;
            const release = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `打包结果: ${tagName}`,
              body: `针对以下平台生成的构建：${needs.validate-issue.outputs.target-platform}`,
              draft: false,
              prerelease: false
            });
            const releaseUrl = release.data.html_url;

            const assets = fs.readdirSync(buildPath);
            for (const asset of assets) {
              const filePath = `${buildPath}/${asset}`;
              const content = fs.readFileSync(filePath);
              await github.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                name: asset,
                data: content
              });
            }

            core.setOutput('release_url', releaseUrl);

      - name: 关闭 Issue
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.payload.issue.number;
            const releaseUrl = steps.upload-release.outputs.release_url;
            await github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `打包完成！请在 [GitHub Releases](${releaseUrl}) 中查看结果。`
            });
            await github.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              state: "closed"
            });
