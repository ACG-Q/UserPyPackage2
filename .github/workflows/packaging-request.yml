name: 自动打包Python项目

on:
  issues:
    types: [opened, edited]

jobs:
  clean-bot-comments:
    runs-on: ubuntu-latest
    if: >
      contains(github.event.issue.labels.*.name, 'packaging-request') &&
      contains(github.event.issue.labels.*.name, 'pyinstaller')
    steps:
      - name: 获取 Issue 中的评论
        id: get-comments
        uses: actions/github-script@v7
        with:
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComments = comments.data.filter(comment => 
              comment.user.login === 'github-actions[bot]' || comment.user.type === 'Bot'
            );

            return botComments.map(comment => comment.id);

      - name: 删除机器人评论
        if: steps.get-comments.outputs.result != '[]'  # 如果找到了评论
        uses: actions/github-script@v7
        with:
          script: |
            const commentIds = ${{ steps.get-comments.outputs.result }};
            for (const commentId of commentIds) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: commentId,
              });
            }
            console.log(`已删除 ${commentIds.length} 条机器人评论。`);

  validate-issue-info:
    runs-on: ubuntu-latest
    if: >
      contains(github.event.issue.labels.*.name, 'packaging-request') &&
      contains(github.event.issue.labels.*.name, 'pyinstaller')
    outputs:
      python-version: ${{ steps.extract-issue-info.outputs.python-version }}
      target-platform: ${{ steps.extract-issue-info.outputs.target-platform }}
      zip-link: ${{ steps.extract-issue-info.outputs.zip-link }}
    steps:
      - name: 检出代码仓库
        uses: actions/checkout@v4

      - name: 配置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: 安装 Python 依赖
        run: python -m pip install --upgrade pip

      - name: 输出 Issue 标题与内容
        run: |
          echo "Issue 标题: ${{ github.event.issue.title }}"
          echo "Issue 内容: ${{ github.event.issue.body }}"

      - name: 提取 Issue 信息
        id: extract-issue-info
        run: |
          python .github/tools/extract-issues.py "${{ github.event.issue.body }}"
        continue-on-error: true

      - name: 提取 Issue 信息错误反馈
        if: steps.extract-issue-info.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `提取 Issue 信息时出错，请检查输入格式是否正确。`
            })

      - name: 终止工作流
        if: steps.extract-issue-info.outcome == 'failure'
        run: exit 1

      - name: 查看提取的 Issue 信息
        run: |
          echo "Python版本: ${{ steps.extract-issue-info.outputs.python-version }}"
          echo "目标平台: ${{ steps.extract-issue-info.outputs.target-platform }}"
          echo "ZIP 文件链接: ${{ steps.extract-issue-info.outputs.zip-link }}"

  build-python-project:
    needs: validate-issue-info
    env:
      python-version: ${{ needs.validate-issue-info.outputs.python-version }}
      zip-link: ${{ needs.validate-issue-info.outputs.zip-link }}
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        target-platform: ${{ fromJson(needs.validate-issue-info.outputs.target-platform) }}
    runs-on: ${{ matrix.target-platform }}
    steps:
      - name: 检出代码仓库
        uses: actions/checkout@v4

      - name: 配置 Python 环境
        id: set-python-environment
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python-version }}
        continue-on-error: true

      - name: Python 环境配置错误反馈
        if: steps.set-python-environment.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `在 ${{ matrix.target-platform }} 环境中设置 Python 时出错，可能是指定的 Python 版本 (${{
                env.python-version }}) 不可用。请参考 [版本清单](https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json) 更新 Issue 中的版本信息。`
            });

      - name: 终止工作流
        if: steps.set-python-environment.outcome == 'failure'
        run: exit 1
      
      - name: 确认 Python 版本
        run: python --version

      - name: 下载 ZIP 文件
        id: download-zip
        run: |
          curl -L -o project.zip ${{ env.zip-link }} || exit 1
        continue-on-error: true

      - name: 下载 ZIP 文件错误反馈
        if: steps.download-zip.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `在 ${{ matrix.target-platform }} 环境中下载 ZIP 文件时出错。\n\n
              - **URL**: ${{ env.zip-link }}\n
              - **可能原因**:\n
                1. 提供的链接无效或已过期。\n
                2. 网络问题导致文件下载失败。\n\n
              - **解决方法**:\n
                1. 检查 Issue 中的链接是否有效。\n
                2. 确保文件可以正常访问。\n
                3. 如有需要，更新链接并重新触发工作流。`
            });

      - name: 终止工作流
        if: steps.download-zip.outcome == 'failure'
        run: exit 1

      - name: 解压 ZIP 文件
        id: unzip-zip
        run: |
          mkdir -p project
          unzip project.zip -d project || exit 1
        continue-on-error: true

      - name: 解压 ZIP 文件错误反馈
        if: steps.unzip-zip.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `在 ${{ matrix.target-platform }} 环境中解压 ZIP 文件时出错。\n\n
              - **可能原因**:\n
                1. ZIP 文件损坏或格式错误。\n
                2. 文件未成功下载。\n\n
              - **解决方法**:\n
                1. 确保上传的文件有效。\n
                2. 检查文件路径和链接是否正确。`
            });

      - name: 终止工作流
        if: steps.unzip-zip.outcome == 'failure'
        run: exit 1

      - name: 安装项目依赖
        id: install-dependencies
        run: |
          python .github/tools/install-requirements.py project/requirements.txt

      - name: 使用 PyInstaller 打包项目
        id: pyinstaller-build
        run: |
          pip install pyinstaller
          python .github/tools/pyinstaller-build.py project
        continue-on-error: true

      - name: PyInstaller 打包错误反馈
        if: steps.pyinstaller-build.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `在 ${{ matrix.target-platform }} 环境中使用 PyInstaller 打包时出错。\n\n
              - **可能原因**:\n
                1. 未找到可用的 .spec 文件或 Python 脚本。\n
                2. PyInstaller 配置错误或缺少依赖。\n\n
              - **解决方法**:\n
                1. 确保项目包含必要的文件。\n
                2. 检查 PyInstaller 配置。\n\n
              请修复后重新运行工作流。`
            });

      - name: 终止工作流
        if: steps.pyinstaller-build.outcome == 'failure'
        run: exit 1

      - name: 保存打包结果
        id: save-build-result
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target-platform }}
          path: dist/*
        continue-on-error: true

      - name: 保存打包结果错误反馈
        if: steps.save-build-result.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `保存打包结果失败，可能原因：\n\n
              1. 打包产物未正确生成。\n
              2. 存储位置问题，无法上传产物。\n\n
              请检查并修复后重试。`
            });

      - name: 终止工作流
        if: steps.save-build-result.outcome == 'failure'
        run: exit 1

  create-release-version:
    needs: [validate-issue-info, build-python-project]
    runs-on: ubuntu-latest
    env:
      zip-link: ${{ needs.validate-issue-info.outputs.zip-link }}
    outputs:
      release_id: ${{ steps.upload-release.outputs.release_id }}
      release_url: ${{ steps.upload-release.outputs.release_url }}
    steps:
      - name: 下载 ZIP 文件
        id: download-zip
        run: |
          curl -L -o project.zip ${{ env.zip-link }} || exit 1
        continue-on-error: true

      - name: 下载 ZIP 文件错误反馈
        if: steps.download-zip.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `在 ${{ matrix.target-platform }} 环境中下载 ZIP 文件时出错。\n\n
              - **URL**: ${{ env.zip-link }}\n
              - **可能原因**:\n
                1. 提供的链接无效或已过期。\n
                2. 网络问题导致文件下载失败。\n\n
              - **解决方法**:\n
                1. 检查 Issue 中的链接是否有效。\n
                2. 确保文件可以正常访问。\n
                3. 如有需要，更新链接并重新触发工作流。`
            });

      - name: 终止工作流
        if: steps.download-zip.outcome == 'failure'
        run: exit 1

      - name: 解压 ZIP 文件
        id: unzip-zip
        run: |
          mkdir -p project
          unzip project.zip -d project || exit 1
        continue-on-error: true

      - name: 解压 ZIP 文件错误反馈
        if: steps.unzip-zip.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `在 ${{ matrix.target-platform }} 环境中解压 ZIP 文件时出错。\n\n
              - **可能原因**:\n
                1. ZIP 文件损坏或格式错误。\n
                2. 文件未成功下载。\n\n
              - **解决方法**:\n
                1. 确保上传的文件有效。\n
                2. 检查文件路径和链接是否正确。`
            });

      - name: 终止工作流
        if: steps.pyinstaller-build.outcome == 'failure'
        run: exit 1
 
      - name: 获取 README.md
        id: get-readme
        run: |
          if [ -f "project/README.md" ]; then
            content=$(cat project/README.md)
            echo "README_CONTENT<<EOF" >> $GITHUB_OUTPUT
            echo "$content" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "README.md 文件不存在"
          fi

      - name: 上传 Release 结果
        id: upload-release
        uses: actions/github-script@v7
        env:
          TARGET_PLATFORMS: ${{ needs.validate-issue-info.outputs.target-platform }}
          README_CONTENT: ${{steps.get-readme.outputs.README_CONTENT}}
        with:
          script: |
            const tagName = `v${new Date().toISOString().replace(/[-T:.Z]/g, '')}`;
            const buildPath = `${process.env.GITHUB_WORKSPACE}/build/`;

            const readmeContent = process.env.README_CONTENT.length > 0 ? `${process.env.README_CONTENT}\n` : '';
      
            // 创建发布
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `打包结果: ${tagName}`,
              body: `${readmeContent}生成的构建针对平台：${process.env.TARGET_PLATFORMS || '未知'}`,
            });
    
            core.setOutput('release_id', release.data.id);
            core.setOutput('release_url', release.data.html_url);
            core.info(`Release 已创建：${release.data.html_url}`);

  upload-build-assets:
    needs: [validate-issue-info, create-release-version]
    strategy:
      matrix:
        target-platform: ${{ fromJson(needs.validate-issue-info.outputs.target-platform) }}
    runs-on: ${{ matrix.target-platform }}
    steps:
      - name: 下载打包结果
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.target-platform }}
          path: build
        continue-on-error: true
      
      - name: 下载打包结果错误反馈
        if: steps.download-artifact.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `在 ${{ matrix.target-platform }} 里面，下载打包结果时出错。\n\n
              - **可能原因**:\n
                1. 构建过程未成功，导致打包结果不存在。\n
                2. 文件路径不正确或权限问题。\n\n
              - **解决方法**:\n
                1. 确认打包过程是否正常完成。\n
                2. 检查打包结果是否生成在 expected-artifacts 目录下。\n\n
                请修复问题后重新运行工作流。`
            })
      
      - name: 终止工作流
        if: steps.download-artifact.outcome == 'failure'
        run: exit 1


      - run: npm install execa
      - name: 上传到 Release
        uses: actions/github-script@v7
        env:
          RELEASE_ID: ${{ needs.create-release-version.outputs.release_id }}
          TARGET_PLATFORM: ${{ matrix.target-platform }}
        with:
          script: |
            const buildPath = `${process.env.GITHUB_WORKSPACE}/build/`;
      
            // 上传文件
            const fs = require('fs');
            const path = require('path');
            const archiver = require('archiver');
            
            fs.readdirSync(buildPath).forEach(async (file) => {
              const filePath = path.join(buildPath, file);
               if (fs.statSync(filePath).isFile()) {
                // 上传单个文件
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: process.env.RELEASE_ID,
                  name: `${file}-${process.env.TARGET_PLATFORM}`,
                  data: fs.readFileSync(filePath),
                });
                core.info(`已上传文件：${file}`);
              } else if (fs.statSync(filePath).isDirectory()) {
                // 如果是目录，则进行打包
                const zipFileName = `${file}-${process.env.TARGET_PLATFORM}.zip`;
                const zipFilePath = path.join(buildPath, zipFileName);
                const output = fs.createWriteStream(zipFilePath);
                const archive = archiver('zip', {
                  zlib: { level: 9 } // 设置压缩级别
                });
            
                output.on('close', function () {
                  console.info(`已打包目录：${file} 为 ${zipFileName}`);
                  // 上传打包后的文件
                  github.rest.repos.uploadReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: process.env.RELEASE_ID,
                    name: zipFileName,
                    data: fs.readFileSync(zipFilePath),
                  });
                  console.info(`已上传打包文件：${zipFileName}`);
                });
            
                archive.on('error', function(err) {
                  console.error(`打包目录 ${file} 时出错：${err.message}`);
                });
            
                archive.pipe(output);
                archive.directory(filePath, false);
                archive.finalize();
              } else {
                core.warning(`跳过非文件/文件夹项：${file}`);
              }
            });

  close-issue-after-release:
    needs: [create-release-version, upload-build-assets]
    runs-on: ubuntu-latest
    steps:
      - name: 关闭 Issue
        uses: actions/github-script@v7
        env:
          RELEASE_URL: ${{ needs.create-release-version.outputs.release_url }}
        with:
          script: |
            const issueNumber = context.payload.issue.number;
            const releaseUrl = process.env.RELEASE_URL;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `打包完成！请在 [GitHub Releases](${releaseUrl}) 中查看结果。`
            });
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              state: "closed"
            });
  
