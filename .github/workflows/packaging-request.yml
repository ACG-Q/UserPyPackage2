name: 自动打包Python项目

on:
  issues:
    types: [opened, edited]

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}  # 根据工作流名称和分支限制并发组
#   cancel-in-progress: true  # 有新触发的任务时，自动取消旧任务

jobs:
  validate-issue:
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.extract-issue-info.outputs.python-version }}
      target-platform: ${{ steps.extract-issue-info.outputs.target-platform }}
      zip-link: ${{ steps.extract-issue-info.outputs.zip-link }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
        continue-on-error: true  # 允许失败继续执行

      - name: 查看触发的 Issue 内容
        run: |
          echo "Issue 标题: ${{ github.event.issue.title }}"
          echo "Issue 内容: ${{ github.event.issue.body }}"

      - name: Extract issue info
        id: extract-issue-info
        run: |
          python .github/tools/extract-issues.py "${{ github.event.issue.body }}"
        continue-on-error: true  # 允许失败继续执行

      - name: 提取 Issue 信息错误反馈
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `提取 Issue 信息时出错`
            });

      - name: 查看提取结果
        run: |
          echo "Python版本: ${{ steps.extract-issue-info.outputs.python-version }}"
          echo "目标平台: ${{ steps.extract-issue-info.outputs.target-platform }}"
          echo "ZIP 文件链接: ${{ steps.extract-issue-info.outputs.zip-link }}"

  setup-environment:
    needs: validate-issue
    strategy:
      fail-fast: false
      matrix:
        target-platform: ${{ fromJson(needs.validate-issue.outputs.target-platform) }}
    runs-on: ${{ matrix.target-platform }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.validate-issue.outputs.python-version }}
        continue-on-error: true
      
      - name: 设置 Python 版本错误反馈
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `设置 Python 版本时出错`
            });

      - name: 确认 Python 版本
        run: python --version

      - name: 下载 ZIP 文件
        run: |
          curl -L -o project.zip ${{ needs.validate-issue.outputs.zip-linkK }} >> result.log
        continue-on-error: true

      - name: 下载 ZIP 文件错误反馈
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const content = fs.readFileSync('result.log', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `下载 ZIP 文件时出错: ${content}`
            });

      - name: 解压 ZIP 文件
        run: |
          mkdir project
          unzip project.zip -d project  >> result.log
        continue-on-error: true

      - name: 解压 ZIP 文件错误反馈
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const content = fs.readFileSync('result.log', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `解压 ZIP 文件时出错: ${content}`
            });

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          if [ -f project/requirements.txt ]; then
            pip install -r project/requirements.txt >> result.log
          fi
        continue-on-error: true

      - name: 安装依赖错误反馈
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const content = fs.readFileSync('result.log', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `安装依赖时出错: ${content}`
            });

      - name: 使用 PyInstaller 打包
        run: |
          pip install pyinstaller
          if [ -f project/*.spec ]; then
            pyinstaller project/*.spec >> result.log
          else
            pyinstaller --onefile project/*.py
          fi
        continue-on-error: true

      - name: PyInstaller 错误反馈
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `使用 PyInstaller 打包时出错`
            });

      - name: 保存打包结果
        run: |
          mkdir -p ${{ github.workspace }}/build/${{ matrix.target-platform }}
          mv dist/* ${{ github.workspace }}/build/${{ matrix.target-platform }}
        continue-on-error: true

      - name: 保存打包结果错误反馈
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `保存打包结果时出错`
            });

  release-result:
    needs: [validate-issue, setup-environment]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: 上传 Release 结果
        uses: actions/github-script@v7
        env:
          TAG_NAME: "v${{ steps.get-tag-name.outputs.tag }}"
        with:
          script: |
            const tagName = `v${new Date().toISOString().replace(/[-T:.Z]/g, '')}`;
            const response = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `打包结果: ${tagName}`,
              body: `针对以下平台生成的构建： ${needs.validate-issue.outputs.target-platform}`,
              draft: false,
              prerelease: false,
            });

            const releaseUrl = response.data.upload_url;
            const assets = await fs.readdir(`${ github.workspace }/build/${ matrix.target-platform }`);
            for (const asset of assets) {
              const filePath = `${ github.workspace }/build/${ matrix.target-platform }/${asset}`;
              const fileBuffer = await fs.readFile(filePath);
              await github.repos.uploadReleaseAsset({
                url: releaseUrl,
                headers: {
                  'content-type': 'application/octet-stream',
                },
                file: fileBuffer,
                name: asset,
              });
            }
      
            core.setOutput('release_url', response.data.html_url);

      - name: 关闭 Issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `打包完成！请在 [GitHub Releases](${steps.release-result.outputs.release_url}) 中查看结果。`,
            });
            await github.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              state: "closed",
            });
