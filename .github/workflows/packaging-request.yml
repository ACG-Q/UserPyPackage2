name: 自动打包Python项目

on:
  issues:
    types: [opened, edited]

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}  # 根据工作流名称和分支限制并发组
#   cancel-in-progress: true  # 有新触发的任务时，自动取消旧任务

jobs:
  validate-issue:
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.extract-issue-info.outputs.python-version }}
      target-platform: ${{ steps.extract-issue-info.outputs.target-platform }}
      zip-link: ${{ steps.extract-issue-info.outputs.zip-link }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
        continue-on-error: true  # 允许失败继续执行

      - name: 安装依赖错误反馈
        if: failure()
        run: |
          echo "安装依赖失败！" >> result.log
          gh issue comment ${{ github.event.issue.number }} --body "安装依赖时出错：$(cat result.log)"
        continue-on-error: false

      - name: 查看触发的 Issue 内容
        run: |
          echo "Issue 标题: ${{ github.event.issue.title }}"
          echo "Issue 内容: ${{ github.event.issue.body }}"

      - name: Extract issue info
        id: extract-issue-info
        run: |
          python .github/tools/extract-issues.py "${{ github.event.issue.body }}"
        continue-on-error: true  # 允许失败继续执行

      - name: 提取 Issue 信息错误反馈
        if: failure()
        run: |
          echo "提取 Issue 信息失败！" >> result.log
          gh issue comment ${{ github.event.issue.number }} --body "提取 Issue 信息时出错：$(cat result.log)"
        continue-on-error: false

      - name: 查看提取结果
        run: |
          echo "Python版本: ${{ steps.extract-issue-info.outputs.python-version }}"
          echo "目标平台: ${{ steps.extract-issue-info.outputs.target-platform }}"
          echo "ZIP 文件链接: ${{ steps.extract-issue-info.outputs.zip-link }}"

  setup-environment:
    needs: validate-issue
    strategy:
      fail-fast: false
      matrix:
        target-platform: ${{ fromJson(needs.validate-issue.outputs.target-platform) }}
    runs-on: ${{ matrix.target-platform }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.validate-issue.outputs.python-version }}

      - name: 确认 Python 版本
        run: python --version
        continue-on-error: true

      - name: 确认 Python 版本错误反馈
        if: failure()
        run: |
          echo "确认 Python 版本失败！" >> result.log
          gh issue comment ${{ github.event.issue.number }} --body "确认 Python 版本时出错：$(cat result.log)"

      - name: 下载 ZIP 文件
        run: |
          wget -O project.zip "${{ needs.validate-issue.outputs.zip-link }}"
        continue-on-error: true

      - name: 下载 ZIP 文件错误反馈
        if: failure()
        run: |
          echo "下载 ZIP 文件失败！" >> result.log
          gh issue comment ${{ github.event.issue.number }} --body "下载 ZIP 文件时出错：$(cat result.log)"

      - name: 解压 ZIP 文件
        run: |
          mkdir project
          unzip project.zip -d project
        continue-on-error: true

      - name: 解压 ZIP 文件错误反馈
        if: failure()
        run: |
          echo "解压 ZIP 文件失败！" >> result.log
          gh issue comment ${{ github.event.issue.number }} --body "解压 ZIP 文件时出错：$(cat result.log)"

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          if [ -f project/requirements.txt ]; then
            pip install -r project/requirements.txt
          fi
        continue-on-error: true

      - name: 安装依赖错误反馈
        if: failure()
        run: |
          echo "安装依赖失败！" >> result.log
          gh issue comment ${{ github.event.issue.number }} --body "安装依赖时出错：$(cat result.log)"

      - name: 使用 PyInstaller 打包
        run: |
          pip install pyinstaller
          if [ -f project/*.spec ]; then
            pyinstaller project/*.spec
          else
            pyinstaller --onefile project/*.py
          fi
        continue-on-error: true

      - name: PyInstaller 错误反馈
        if: failure()
        run: |
          echo "使用 PyInstaller 打包失败！" >> result.log
          gh issue comment ${{ github.event.issue.number }} --body "使用 PyInstaller 打包时出错：$(cat result.log)"

      - name: 保存打包结果
        run: |
          mkdir -p ${{ github.workspace }}/dist/${{ matrix.target-platform }}
          mv dist/* ${{ github.workspace }}/dist/${{ matrix.target-platform }}
        continue-on-error: true

      - name: 保存打包结果错误反馈
        if: failure()
        run: |
          echo "保存打包结果失败！" >> result.log
          gh issue comment ${{ github.event.issue.number }} --body "保存打包结果时出错：$(cat result.log)"

  release-result:
    needs: [setup-environment, validate-issue]
    runs-on: ubuntu-latest
    steps:
      - name: 上传 Release 结果
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="v$(date +%Y%m%d%H%M%S)"
          gh release create "$TAG_NAME" ./dist/**/* \
            --title "打包结果: $TAG_NAME" \
            --notes "针对以下平台生成的构建： ${{ needs.validate-issue.outputs.target-platform }}"

      - name: 关闭 Issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue comment ${{ github.event.issue.number }} --body "打包完成！请在 [GitHub Releases](https://github.com/${{ github.repository }}/releases/tag/$TAG_NAME) 中查看结果。"
          gh issue edit ${{ github.event.issue.number }} --state closed
