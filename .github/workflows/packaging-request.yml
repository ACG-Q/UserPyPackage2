name: 自动打包Python项目

on:
  issues:
    types: [opened, edited]

jobs:
  clean-comments:
    runs-on: ubuntu-latest
    steps:
      - name: 获取 Issue 评论
        id: get-comments
        uses: actions/github-script@v7
        with:
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComments = comments.data.filter(comment => 
              comment.user.login === 'github-actions[bot]' || comment.user.type === 'Bot'
            );

            return botComments.map(comment => comment.id);

      - name: 删除机器人评论
        if: steps.get-comments.outputs.result != '[]'  # 如果找到了评论
        uses: actions/github-script@v7
        with:
          script: |
            const commentIds = ${{ steps.get-comments.outputs.result }};
            for (const commentId of commentIds) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: commentId,
              });
            }
            console.log(`已删除 ${commentIds.length} 条机器人评论。`);

  validate-issue:
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.extract-issue-info.outputs.python-version }}
      target-platform: ${{ steps.extract-issue-info.outputs.target-platform }}
      zip-link: ${{ steps.extract-issue-info.outputs.zip-link }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: python -m pip install --upgrade pip

      - name: 查看触发的 Issue 内容
        run: |
          echo "Issue 标题: ${{ github.event.issue.title }}"
          echo "Issue 内容: ${{ github.event.issue.body }}"

      - name: Extract issue info
        id: extract-issue-info
        run: |
          python .github/tools/extract-issues.py "${{ github.event.issue.body }}"
        continue-on-error: true

      - name: 提取 Issue 信息错误反馈
        if: steps.extract-issue-info.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `提取 Issue 信息时出错，请检查输入格式是否正确。`
            })

      - name: 终止工作流
        if: steps.extract-issue-info.outcome == 'failure'
        run: exit 1

      - name: 查看提取结果
        run: |
          echo "Python版本: ${{ steps.extract-issue-info.outputs.python-version }}"
          echo "目标平台: ${{ steps.extract-issue-info.outputs.target-platform }}"
          echo "ZIP 文件链接: ${{ steps.extract-issue-info.outputs.zip-link }}"

  build-project:
    needs: validate-issue
    env:
      python-version: ${{ needs.validate-issue.outputs.python-version }}
      zip-link: ${{ needs.validate-issue.outputs.zip-link }}
    strategy:
      # max-parallel: 2
      fail-fast: false
      matrix:
        target-platform: ${{ fromJson(needs.validate-issue.outputs.target-platform) }}
    runs-on: ${{ matrix.target-platform }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Python 环境
        id: set-python-environment
        uses: actions/setup-python@v5
        with:
          python-version: env.python-version
        continue-on-error: true

      - name: 设置 Python 环境错误反馈
        if: steps.set-python-environment.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `在 ${{ matrix.target-platform }} 里面，设置 Python 环境时出错。可能是指定的 Python 版本 (${{ env.python-version }}) 不可用。\n请参考 [版本清单](https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json) 并更新 Issue。`
            });

      - name: 终止工作流
        if: steps.set-python-environment.outcome == 'failure'
        run: exit 1
      
      - name: 确认 Python 版本
        run: python --version

      - name: 下载 ZIP 文件
        id: download-zip
        run: |
          curl -L -o project.zip ${{ env.zip-link }} || exit 1
        continue-on-error: true

      - name: 下载 ZIP 文件错误反馈
        if: steps.download-zip.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `在 ${{ matrix.target-platform }} 里面，下载 ZIP 文件时出错。\n\n
              - **URL**: ${{ env.zip-link }}\n
              - **可能原因**:\n
                1. 提供的 ZIP 文件链接无效或已过期。\n
                2. 网络问题导致无法下载文件。\n\n
              - **解决方法**:\n
                1. 检查 Issue 中提供的链接是否正确并有效。\n
                2. 确保链接指向的是一个可访问的 ZIP 文件。\n
                3. 如有需要，请在 Issue 中更新链接。\n\n
              请根据上述提示修正后重新触发工作流。`
            });

      - name: 终止工作流
        if: steps.download-zip.outcome == 'failure'
        run: exit 1

      - name: 解压 ZIP 文件
        id: unzip-zip
        run: |
          mkdir -p project
          unzip project.zip -d project || exit 1
        continue-on-error: true

      - name: 解压 ZIP 文件错误反馈
        if: steps.unzip-zip.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `在 ${{ matrix.target-platform }} 里面，解压 ZIP 文件时出错。\n\n
              - **可能原因**:\n
                1. ZIP 文件损坏或格式不正确。\n
                2. 文件未成功下载。\n\n
              - **解决方法**:\n
                1. 确保上传的 ZIP 文件是有效的。\n
                2. 在 Issue 中检查并更新链接。\n\n
              请修复问题后重新运行工作流。`
            });

      - name: 终止工作流
        if: steps.unzip-zip.outcome == 'failure'
        run: exit 1

      - name: 安装依赖
        id: install-dependencies
        run: |
          python .github/tools/install-requirements.py project/requirements.txt

      - name: 使用 PyInstaller 打包
        id: pyinstaller-build
        run: |
          pip install pyinstaller
          python .github/tools/pyinstaller-build.py project
        continue-on-error: true

      - name: 使用 PyInstaller 打包错误反馈
        if: steps.pyinstaller-build.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `在 ${{ matrix.target-platform }} 里面，使用 PyInstaller 打包时出错。\n\n
              - **可能原因**:\n
                1. 未找到可用的 .spec 文件或 Python 脚本。\n
                2. PyInstaller 配置不正确或依赖缺失。\n\n
              - **解决方法**:\n
                1. 确保项目根目录下包含 .spec 文件或至少一个 Python 脚本。\n
                2. 检查并修正 PyInstaller 的配置。\n\n
              请修复问题后重新运行工作流。`
            });

      - name: 终止工作流
        if: steps.pyinstaller-build.outcome == 'failure'
        run: exit 1

      - name: 保存打包结果
        id: save-build-result
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target-platform }}
          path: dist/*
        continue-on-error: true

      - name: 保存打包结果错误反馈
        if: steps.save-build-result.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `在 ${{ matrix.target-platform }} 里面，保存打包结果时出错。\n\n
              - **可能原因**:\n
                1. 打包过程未成功，导致 dist 目录为空。\n
                2. 文件路径不正确或权限问题。\n\n
              - **解决方法**:\n
                1. 确认打包过程是否正常完成。\n
                2. 检查 dist 目录下是否生成了正确的文件。\n\n
              请修复问题后重新运行工作流。`
            });

      - name: 终止工作流
        if: steps.save-build-result.outcome == 'failure'
        run: exit 1

  create-release:
    needs: [validate-issue, build-project]
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.upload-release.outputs.release_id }}
      release_url: ${{ steps.upload-release.outputs.release_url }}
    steps:
      - name: 上传 Release 结果
        id: upload-release
        uses: actions/github-script@v7
        env:
          TARGET_PLATFORMS: ${{ needs.validate-issue.outputs.target-platform }}
        with:
          script: |
            const tagName = `v${new Date().toISOString().replace(/[-T:.Z]/g, '')}`;
            const buildPath = `${process.env.GITHUB_WORKSPACE}/build/`;
      
            // 创建发布
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `打包结果: ${tagName}`,
              body: `生成的构建针对平台：${process.env.TARGET_PLATFORMS || '未知'}`,
            });
    
            core.setOutput('release_id', release.data.id);
            core.setOutput('release_url', release.data.html_url);
            core.info(`Release 已创建：${release.data.html_url}`);

  upload-result:
    needs: [validate-issue, create-release]
    strategy:
      matrix:
        target-platform: ${{ fromJson(needs.validate-issue.outputs.target-platform) }}
    runs-on: ${{ matrix.target-platform }}
    steps:
      - name: 下载打包结果
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.target-platform }}
          path: build
        continue-on-error: true
      
      - name: 下载打包结果错误反馈
        if: steps.download-artifact.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `在 ${{ matrix.target-platform }} 里面，下载打包结果时出错。\n\n
              - **可能原因**:\n
                1. 构建过程未成功，导致打包结果不存在。\n
                2. 文件路径不正确或权限问题。\n\n
              - **解决方法**:\n
                1. 确认打包过程是否正常完成。\n
                2. 检查打包结果是否生成在 expected-artifacts 目录下。\n\n
                请修复问题后重新运行工作流。`
            })
      
      - name: 终止工作流
        if: steps.download-artifact.outcome == 'failure'
        run: exit 1

      - name: 上传到 Release
        uses: actions/github-script@v7
        env:
          RELEASE_ID: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            const buildPath = `${process.env.GITHUB_WORKSPACE}/build/`;
      
            // 上传文件
            const fs = require('fs');
            const path = require('path');
            fs.readdirSync(buildPath).forEach(async (file) => {
              const filePath = path.join(buildPath, file);
              if (fs.statSync(filePath).isFile()) {
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: process.env.RELEASE_ID,
                  name: file,
                  data: fs.readFileSync(filePath),
                });
                core.info(`已上传文件：${file}`);
              }else{
                core.warning(`跳过非文件项：${asset}`);
              }
            });

  close-issue:
    needs: [create-release, upload-result]
    runs-on: ubuntu-latest
    steps:
      - name: 关闭 Issue
        uses: actions/github-script@v7
        env:
          RELEASE_URL: ${{ needs.create-release.outputs.release_url }}
        with:
          script: |
            const issueNumber = context.payload.issue.number;
            const releaseUrl = process.env.RELEASE_URL;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `打包完成！请在 [GitHub Releases](${releaseUrl}) 中查看结果。`
            });
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              state: "closed"
            });
  
